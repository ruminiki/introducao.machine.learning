ylab("Proporção")
#Distribuição Sexo
df %>% select(Cluster, Sex) %>%
ggplot(aes(x=Cluster, fill=as.factor(Sex))) +
geom_bar(stat = "count")+
scale_colour_viridis_d()
#Distribuição Sexo
df %>% select(Cluster, Sex) %>%
ggplot(aes(x=Cluster, fill=as.factor(Sex))) +
geom_bar(stat = "count")+
scale_colour_viridis_d()+
xlab("Cluster") +
ylab("Proporção")
#Distribuição Sexo
df %>% select(Cluster, Sex) %>%
ggplot(aes(x=Cluster, fill=as.factor(Sex))) +
geom_bar(stat = "count")+
scale_colour_viridis_c()+
xlab("Cluster") +
ylab("Proporção")
df %>% select(Cluster, Sex) %>%
ggplot(aes(x=Cluster, fill=as.factor(Sex))) +
geom_bar(stat = "count")+
scale_colour_viridis_c()+
xlab("Cluster") +
ylab("Proporção")
#Distribuição Sexo
df %>% select(Cluster, Sex) %>%
ggplot(aes(x=Cluster, fill=as.factor(Sex))) +
geom_bar(stat = "count")+
scale_fill_viridis_d()+
xlab("Cluster") +
ylab("Proporção")
#Distribuição Sexo
df %>% select(Cluster, Sex) %>%
ggplot(aes(x=Cluster, fill=as.factor(Sex))) +
geom_bar(stat = "count")+
scale_fill_viridis_c(option = "plasma")+
xlab("Cluster") +
ylab("Proporção")
scale_color_manual(values = c("red", "blue")
#Distribuição Sexo
df %>% select(Cluster, Sex) %>%
#Distribuição Sexo
df %>% select(Cluster, Sex) %>%
ggplot(aes(x=Cluster, fill=as.factor(Sex))) +
geom_bar(stat = "count")+
scale_color_manual(values = c("red", "blue"))+
xlab("Cluster") +
ylab("Proporção")
#Distribuição Sexo
df %>% select(Cluster, Sex) %>%
ggplot(aes(x=Cluster, fill=as.factor(Sex))) +
geom_bar(stat = "count")+
scale_fill_manual(values = c("red", "blue"))+
xlab("Cluster") +
ylab("Proporção")
#Distribuição Sexo
df %>% select(Cluster, Sex) %>%
ggplot(aes(x=Cluster, fill=as.factor(Sex))) +
geom_bar(stat = "count")+
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
xlab("Cluster") +
ylab("Proporção")
df %>% select(Cluster, Sex) %>%
ggplot(aes(x=Cluster, fill=as.factor(Sex))) +
geom_bar(stat = "count")+
scale_fill_grey(start=0.8, end=0.2) + theme_classic()
#Distribuição Sexo
df %>% select(Cluster, Sex) %>%
ggplot(aes(x=Cluster, fill=as.factor(Sex))) +
geom_bar(stat = "count")+
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
xlab("Cluster") +
ylab("Proporção")
#proporção sobreviventes por cluster
df %>% group_by(Cluster) %>%
summarise(mean_survived = mean(Survived==1)*100) %>%
ggplot(aes(x=Cluster, y=mean_survived, fill=mean_survived)) +
geom_bar(stat = "identity")+
#geom_hline(yintercept=mean(df$Survived==1), col="red")+
xlab("Cluster") +
ylab("Proporção")
#proporção sobreviventes por cluster
df %>% group_by(Cluster) %>%
summarise(mean_survived = mean(Survived==1)*100) %>%
ggplot(aes(x=Cluster, y=mean_survived, fill=mean_survived)) +
geom_bar(stat = "identity")+
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
#geom_hline(yintercept=mean(df$Survived==1), col="red")+
xlab("Cluster") +
ylab("Proporção")
#Distribuição Sexo
df %>% select(Cluster, Sex) %>%
ggplot(aes(x=Cluster, fill=as.factor(Sex))) +
geom_bar(stat = "count")+
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
xlab("Cluster") +
ylab("Proporção")
#proporção sobreviventes por cluster
df %>% group_by(Cluster, Sex) %>%
summarise(count=n()) %>%
ggplot(aes(x=Cluster, y=mean_survived, fill=Sex)) +
geom_bar(stat = "identity")+
#geom_hline(yintercept=mean(df$Survived==1), col="red")+
xlab("Cluster") +
ylab("Proporção")
#proporção sobreviventes por cluster
df %>% group_by(Cluster, Sex) %>%
summarise(count=n()) %>%
ggplot(aes(x=Cluster, y=count, fill=Sex)) +
geom_bar(stat = "identity")+
#geom_hline(yintercept=mean(df$Survived==1), col="red")+
xlab("Cluster") +
ylab("Proporção")
#proporção sobreviventes por cluster
df %>% group_by(Cluster, Sex) %>%
summarise(count=n()) %>%
ggplot(aes(x=Cluster, y=count, fill=Sex)) +
geom_bar(stat = "identity")+
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
xlab("Cluster") +
ylab("Proporção")
#proporção sobreviventes por cluster
df %>% group_by(Cluster, Sex) %>%
summarise(count=n()) %>%
ggplot(aes(x=Cluster, y=count, fill=as.factor(Sex))) +
geom_bar(stat = "identity")+
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
xlab("Cluster") +
ylab("Proporção")
#Distribuição Sexo
df %>% select(Cluster, Sex) %>%
ggplot(aes(x=Cluster, fill=as.factor(Sex))) +
geom_bar(stat = "count")+
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
xlab("Cluster") +
ylab("Proporção")
#proporção sobreviventes por cluster
df %>% group_by(Cluster, Sex) %>%
summarise(count=n()) %>%
ggplot(aes(x=Cluster, y=count, fill=as.factor(Sex))) +
geom_bar(stat = "identity")+
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
xlab("Cluster") +
ylab("Proporção")
#Distribuição Sexo
df %>% select(Cluster, Sex) %>%
ggplot(aes(x=Cluster, fill=as.factor(Sex))) +
geom_bar(stat = "count")+
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
xlab("Cluster") +
ylab("Proporção")
df %>% group_by(Cluster, Sex, Survived) %>%
summarise(count=n())
#proporção sobreviventes por cluster
df %>% group_by(Cluster, Sex, Survived) %>%
summarise(count=n()) %>%
ggplot(aes(x=Cluster, y=count, fill=as.factor(Sex))) +
geom_bar(stat = "identity")+
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
xlab("Cluster") +
ylab("Proporção") +
facet_grid(~Survived)
df %>%
filter(!is.na(Age)) %>%
ggplot(aes(x = Age, y = after_stat(count), group=Cluster, fill = Cluster)) +
geom_density(aes(color=Survived),alpha=0.2)
#proporção sobreviventes por cluster
df %>% group_by(Cluster, Sex, Survived) %>%
summarise(count=n()) %>%
ggplot(aes(x=Cluster, y=count, fill=as.factor(Sex))) +
geom_bar(stat = "identity")+
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
xlab("Cluster") +
ylab("Proporção") +
facet_grid(~Survived)
#proporção sobreviventes por cluster
df %>% group_by(Cluster, Sex, Survived) %>%
summarise(count=n()) %>%
ggplot(aes(x=Cluster, y=count, fill=as.factor(Sex))) +
geom_bar(stat = "identity")+
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
xlab("Cluster") +
ylab("Proporção") +
facet_wrap(~Survived, nrow = 2)
#ANÁLISE
df$Sex <- ifelse(df$Sex == 1, "M", "F")
#Matriz de contingência
table(df$Cluster, ifelse(df$Survived==1,"Survived", "Died"))
table(ifelse(df$Sex==1, "M", "F"), ifelse(df$Survived==1,"Survived", "Died"))
table(df$Sex, ifelse(df$Survived==1,"Survived", "Died"))
#Média Fare e Age
df %>% group_by(Cluster) %>%
summarise_at(vars("Fare", "Age"), mean)
df %>% group_by(Cluster) %>%
summarise(SexM = sum(Sex==1)) %>%
summarise(SexF = sum(Sex==0))
df %>% group_by(Cluster) %>%
summarise(SexM = sum(Sex=="M")) %>%
summarise(SexF = sum(Sex=="F"))
df %>% group_by(Cluster) %>%
summarise(SexM = sum(Sex=="M")) %>%
summarise(SexF = sum(Sex=="F"))
#ANÁLISE
df$Sex <- ifelse(df$Sex == 1, "M", "F")
################################################
################################################
df <-  read.csv("data/titanic.csv", sep = ",")
#converte Sex para inteiro. 1:masculino, 0:feminino
df$Sex <- ifelse(df$Sex == "male", 1, 0)
#trata NAs idade
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = T)
sum(is.na(df$Age))
aux <- as.data.frame(scale(df[,c(2,3,5,6,7,8,10)]))
set.seed(1)
#elbow
fviz_nbclust(aux, kmeans, method = "wss", k.max = 10)
set.seed(1)
# Elaboração da clusterização não hieráquica k-means
cluster_kmeans <- kmeans(aux, centers = 4, nstart = 10)
#visualização dos clusters
fviz_cluster(cluster_kmeans, aux, palette = "Set2",
ggtheme = theme(legend.text = element_text(size = 16)))
#Criando variável categórica para indicação do cluster no banco de dados
df$Cluster <- as.factor(cluster_kmeans$cluster)
#ANÁLISE
df$Sex <- ifelse(df$Sex == 1, "M", "F")
#Matriz de contingência
table(df$Cluster, ifelse(df$Survived==1,"Survived", "Died"))
table(df$Sex, ifelse(df$Survived==1,"Survived", "Died"))
#Média Fare e Age
df %>% group_by(Cluster) %>%
summarise_at(vars("Fare", "Age"), mean)
df %>% group_by(Cluster) %>%
summarise(SexM = sum(Sex=="M")) %>%
summarise(SexF = sum(Sex=="F"))
df %>% group_by(Cluster) %>%
summarise(SexM = sum(Sex=="M"))
hist(df$Age)
#total sobreviventes por cluster
df %>%
group_by(Cluster, Survived) %>%
summarise(Total = n()) %>%
ggplot(aes(x=Cluster, y=Total, fill=Survived)) +
geom_bar(stat = "identity")+
geom_hline(yintercept=mean(df$Survived==1), col="red")+
xlab("Cluster") +
ylab("?")
#proporção sobreviventes por cluster
df %>% group_by(Cluster) %>%
summarise(mean_survived = mean(Survived==1)*100) %>%
ggplot(aes(x=Cluster, y=mean_survived, fill=mean_survived)) +
geom_bar(stat = "identity")+
#geom_hline(yintercept=mean(df$Survived==1), col="red")+
xlab("Cluster") +
ylab("Proporção")
#proporção sobreviventes por cluster
df %>% group_by(Cluster) %>%
summarise(Perc_Survived = mean(Survived==1)*100) %>%
ggplot(aes(x=Cluster, y=mean_survived, fill=mean_survived)) +
geom_bar(stat = "identity")+
#geom_hline(yintercept=mean(df$Survived==1), col="red")+
xlab("Cluster") +
ylab("Proporção")
#proporção sobreviventes por cluster
df %>% group_by(Cluster) %>%
summarise(Perc_Survived = mean(Survived==1)*100) %>%
ggplot(aes(x=Cluster, y=mean_survived, fill=mean_survived)) +
geom_bar(stat = "identity")+
#geom_hline(yintercept=mean(df$Survived==1), col="red")+
xlab("Cluster") +
ylab("Proporção")
#proporção sobreviventes por cluster
df %>% group_by(Cluster) %>%
summarise(Perc_Survived = mean(Survived==1)*100) %>%
ggplot(aes(x=Cluster, y=Perc_Survived, fill=Perc_Survived)) +
geom_bar(stat = "identity")+
#geom_hline(yintercept=mean(df$Survived==1), col="red")+
xlab("Cluster") +
ylab("Proporção")
#proporção sobreviventes por cluster
df %>% group_by(Cluster) %>%
summarise(Perc_Survived = mean(Survived==1)*100) %>%
ggplot(aes(x=Cluster, y=Perc_Survived, fill=Perc_Survived)) +
geom_bar(stat = "identity")+
geom_hline(yintercept=mean(df$Perc_Survived==1), col="red")+
xlab("Cluster") +
ylab("Proporção")
#proporção sobreviventes por cluster
df %>% group_by(Cluster) %>%
summarise(Perc_Survived = mean(Survived==1)*100) %>%
ggplot(aes(x=Cluster, y=Perc_Survived, fill=Perc_Survived)) +
geom_bar(stat = "identity")+
geom_hline(yintercept=mean(df$Survived==1)*100, col="red")+
xlab("Cluster") +
ylab("Proporção")
#Distribuição Sexo
df %>% select(Cluster, Sex) %>%
ggplot(aes(x=Cluster, fill=as.factor(Sex))) +
geom_bar(stat = "count")+
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
xlab("Cluster") +
ylab("Proporção")
#Distribuição Sexo
df %>% select(Cluster, Sex) %>%
ggplot(aes(x=Cluster, fill=Sex)) +
geom_bar(stat = "count")+
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
xlab("Cluster") +
ylab("Proporção")
#proporção sobreviventes por cluster
df %>% group_by(Cluster, Sex, Survived) %>%
summarise(count=n()) %>%
ggplot(aes(x=Cluster, y=count, fill=Sex)) +
geom_bar(stat = "identity")+
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
xlab("Cluster") +
ylab("Proporção") +
facet_wrap(~Survived, nrow = 2)
df %>% group_by(Cluster, Sex, Survived) %>%
summarise(count=n())
#proporção sobreviventes por cluster
df %>% group_by(Cluster, Sex, Survived) %>%
summarise(count=n()) %>%
ggplot(aes(x=Cluster, y=count, fill=Sex)) +
geom_bar(stat = "identity")+
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
xlab("Cluster") +
ylab("Proporção") +
facet_wrap(~Survived, nrow = 2)
df %>% group_by(Cluster, Sex, Survived) %>%
summarise(count=n()) %>%
ggplot(aes(x=Cluster, y=count, fill=Sex)) +
geom_bar(stat = "identity")+
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
xlab("Cluster") +
ylab("Proporção")
#proporção sobreviventes por cluster
df %>% group_by(Cluster, Sex, Survived) %>%
summarise(count=n()) %>%
ggplot(aes(x=Cluster, y=count, fill=Sex)) +
geom_bar(stat = "identity")+
scale_fill_manual(values = c("#E69F00", "#56B4E9"))+
xlab("Cluster") +
ylab("Proporção") +
facet_wrap(~Survived, nrow = 2)
#load prepared dataset
df <- read.csv("data/titanic.csv", sep = ",")
#converte Sex para inteiro. 1:masculino, 0:feminino
df$Sex <- ifelse(df$Sex == "male", 1, 0)
#trata NAs idade
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = T)
sum(is.na(df$Age))
set.seed(1)
split <- sample.split(df, SplitRatio = 0.7)
treino <- subset(df, split == "TRUE")
teste  <- subset(df, split == "FALSE")
set.seed(1)
#implementando o modelo
modelo <- glm(Survived ~ Cluster, data = treino, family = "binomial")
summary(modelo)
predictions <- predict(modelo, teste, type="response")
teste$pred <- round(predictions, 5)
#load prepared dataset
df <- read.csv("data/titanic.csv", sep = ",")
#converte Sex para inteiro. 1:masculino, 0:feminino
df$Sex <- ifelse(df$Sex == "male", 1, 0)
#trata NAs idade
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = T)
sum(is.na(df$Age))
set.seed(1)
split <- sample.split(df, SplitRatio = 0.7)
treino <- subset(df, split == "TRUE")
teste  <- subset(df, split == "FALSE")
set.seed(1)
#implementando o modelo
modelo <- glm(Survived ~ Cluster, data = treino, family = "binomial")
#implementando o modelo
modelo <- glm(Survived ~ Pclass+Sex, data = treino, family = "binomial")
summary(modelo)
predictions <- predict(modelo, teste, type="response")
teste$pred <- round(predictions, 5)
pred.class <- ifelse(predictions > 0.5, "Survived", "Died")
teste$Survived_class <- ifelse(teste$Survived == 1, "Survived", "Died")
table(pred.class)
table(teste$Survived_class)
# Model accuracy
mean(pred.class == teste$Survived_class)
#Matriz de confusão para cutoff = 0.5 (função confusionMatrix do pacote caret)
confusionMatrix(as.factor(teste$Survived_class), as.factor(pred.class))
ROC <- roc(response = teste$Survived, predictions, plot = TRUE, print.auc = TRUE)
#Matriz de confusão para cutoff = 0.5 (função confusionMatrix do pacote caret)
confusionMatrix(as.factor(teste$Survived_class), as.factor(pred.class))
predictions <- predict(modelo, teste, type="response", positive = 1)
teste$pred <- round(predictions, 5)
pred.class <- ifelse(predictions > 0.5, "Survived", "Died")
teste$Survived_class <- ifelse(teste$Survived == 1, "Survived", "Died")
table(pred.class)
table(teste$Survived_class)
# Model accuracy
mean(pred.class == teste$Survived_class)
#Matriz de confusão para cutoff = 0.5 (função confusionMatrix do pacote caret)
confusionMatrix(as.factor(teste$Survived_class), as.factor(pred.class))
View(teste)
#Matriz de confusão para cutoff = 0.5 (função confusionMatrix do pacote caret)
confusionMatrix(as.factor(teste$Survived_class), as.factor(pred.class), positive = "Survived")
relevel(teste$Survived_class, ref = "Survived")
teste$Survived_class <- as.factor(ifelse(teste$Survived == 1, "Survived", "Died"))
relevel(teste$Survived_class, ref = "Survived")
table(pred.class)
table(teste$Survived_class)
levels(teste$Survived_class)
teste$Survived_class <- relevel(teste$Survived_class, ref = "Survived")
levels(teste$Survived_class)
table(pred.class)
table(teste$Survived_class)
# Model accuracy
mean(pred.class == teste$Survived_class)
#Matriz de confusão para cutoff = 0.5 (função confusionMatrix do pacote caret)
confusionMatrix(as.factor(teste$Survived_class), as.factor(pred.class), positive = "Survived")
#load prepared dataset
df <- read.csv("data/titanic.csv", sep = ",")
#converte Sex para inteiro. 1:masculino, 0:feminino
df$Sex <- ifelse(df$Sex == "male", 1, 0)
#trata NAs idade
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = T)
sum(is.na(df$Age))
set.seed(1)
split <- sample.split(df, SplitRatio = 0.7)
treino <- subset(df, split == "TRUE")
teste  <- subset(df, split == "FALSE")
teste$Survived_class <- as.factor(ifelse(teste$Survived == 1, "Survived", "Died"))
teste$Survived_class <- relevel(teste$Survived_class, ref = "Survived")
levels(teste$Survived_class)
set.seed(1)
#implementando o modelo
modelo <- glm(Survived ~ Pclass+Sex, data = treino, family = "binomial")
summary(modelo)
predictions <- predict(modelo, teste, type="response")
teste$pred <- round(predictions, 5)
pred.class <- ifelse(predictions > 0.5, "Survived", "Died")
table(pred.class)
table(teste$Survived_class)
table(pred.class)
pred.class <- ifelse(predictions >= 0.5, "Survived", "Died")
table(pred.class)
table(teste$Survived_class)
# Model accuracy
mean(pred.class == teste$Survived_class)
#Matriz de confusão para cutoff = 0.5 (função confusionMatrix do pacote caret)
confusionMatrix(as.factor(teste$Survived_class), as.factor(pred.class), positive = "Survived")
pred.class <- ifelse(predictions < 0.5, "Died", "Survived")
table(pred.class)
table(teste$Survived_class)
# Model accuracy
mean(pred.class == teste$Survived_class)
#Matriz de confusão para cutoff = 0.5 (função confusionMatrix do pacote caret)
confusionMatrix(as.factor(teste$Survived_class), as.factor(pred.class), positive = "Survived")
split <- sample.split(df, SplitRatio = 0.7)
treino <- subset(df, split == "TRUE")
teste  <- subset(df, split == "FALSE")
teste$Survived_class <- as.factor(ifelse(teste$Survived == 1, "Survived", "Died"))
teste$Survived_class <- relevel(teste$Survived_class, ref = "Survived")
levels(teste$Survived_class)
set.seed(1)
#implementando o modelo
modelo <- glm(Survived ~ Pclass+Sex, data = treino, family = "binomial")
summary(modelo)
predictions <- predict(modelo, teste, type="response")
teste$pred <- round(predictions, 5)
pred.class <- ifelse(predictions < 0.5, "Died", "Survived")
table(pred.class)
pred.class <- relevel(pred.class, ref = "Survived")
#load prepared dataset
df <- read.csv("data/titanic.csv", sep = ",")
#converte Sex para inteiro. 1:masculino, 0:feminino
df$Sex <- ifelse(df$Sex == "male", 1, 0)
#trata NAs idade
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = T)
sum(is.na(df$Age))
set.seed(1)
split <- sample.split(df, SplitRatio = 0.7)
treino <- subset(df, split == "TRUE")
teste  <- subset(df, split == "FALSE")
set.seed(1)
#implementando o modelo
modelo <- glm(Survived ~ Pclass+Sex, data = treino, family = "binomial")
summary(modelo)
predictions <- predict(modelo, teste, type="response")
teste$pred <- round(predictions, 5)
pred.class <- ifelse(predictions < 0.5, "Died", "Survived")
teste$Survived_class <- as.factor(ifelse(teste$Survived == 1, "Survived", "Died"))
table(pred.class)
table(teste$Survived_class)
# Model accuracy
mean(pred.class == teste$Survived_class)
#Matriz de confusão para cutoff = 0.5 (função confusionMatrix do pacote caret)
confusionMatrix(as.factor(teste$Survived_class), as.factor(pred.class))
1/(1+np.exp(-5))
1(1=e⁻5)
1(1+e⁻5)
1(1+e^⁻5)
1(1 + e ^ -5)
1(1 + e ^ -5)
1(1 + exp(-5))
exp(-5)
1(1 + exp(-5))
1/(1 + exp(-5))
1/(1 + exp(-10))
1/(1 + exp(-5))
1/(1 + exp(8))
